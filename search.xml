<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis-plus_hello</title>
      <link href="2020/10/18/Mybatis-plus_hello/"/>
      <url>2020/10/18/Mybatis-plus_hello/</url>
      
        <content type="html"><![CDATA[<h1 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h1><h4 id="config-MyBatisPlus-Config"><a href="#config-MyBatisPlus-Config" class="headerlink" title="config.MyBatisPlus-Config"></a>config.MyBatisPlus-Config</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 标记为配置文件</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.zhouxug.hello.dao&quot;)</span>  <span class="comment">// 扫描DAO层文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  分页插件 分页具体使用会在后续讲述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dao-BlogMapper-被扫描文件"><a href="#dao-BlogMapper-被扫描文件" class="headerlink" title="dao.BlogMapper 被扫描文件"></a>dao.BlogMapper 被扫描文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span> <span class="comment">// 作为仓库 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Blog</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//继承自 BaseMapper&lt;T&gt; 泛型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-自动填充"><a href="#2-自动填充" class="headerlink" title="2. 自动填充"></a>2. 自动填充</h1><h4 id="config-MyMetaObjectHandler"><a href="#config-MyMetaObjectHandler" class="headerlink" title="config.MyMetaObjectHandler"></a>config.MyMetaObjectHandler</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需实现 MetaObjectHandler 中 insertFill 和 updateFill 方法</span></span><br><span class="line"><span class="comment"> * 使用时就要取消掉数据库的自动填充</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入时填充</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// setFieldValByName </span></span><br><span class="line">        <span class="comment">// 第一个参数是你要填充字段的  实体名称  ！！！</span></span><br><span class="line">        <span class="comment">// 第二个为填充值</span></span><br><span class="line">        <span class="comment">// 第三个为元数据</span></span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;blogPostTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;blogUpdateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新时填充</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;blogUpdateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-分页插件"><a href="#3-分页插件" class="headerlink" title="3. 分页插件"></a>3. 分页插件</h1><h4 id="config-MyBatisPlus-Config-1"><a href="#config-MyBatisPlus-Config-1" class="headerlink" title="config.MyBatisPlus-Config"></a>config.MyBatisPlus-Config</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在config中配置分页插件 </span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 使用Page来指定分页</span></span><br><span class="line"><span class="comment">// current 为当前第几页 从一开始</span></span><br><span class="line"><span class="comment">// size 为每一页的行数</span></span><br><span class="line">Page&lt;Attachment&gt; page = <span class="keyword">new</span> Page&lt;&gt;(current, size);</span><br><span class="line">   QueryWrapper&lt;Attachment&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">   wrapper.orderByDesc(<span class="string">&quot;upload_time&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用mapper 中的selectPage 来传入wrapper 和 page 参数 从而达到分页</span></span><br><span class="line">   IPage&lt;Attachment&gt; attachmentIPage = attachmentMapper.selectPage(page, wrapper);</span><br><span class="line">   List&lt;Attachment&gt; records = attachmentIPage.getRecords();</span><br></pre></td></tr></table></figure><h1 id="4-自定义SQL"><a href="#4-自定义SQL" class="headerlink" title="4. 自定义SQL"></a>4. 自定义SQL</h1><h4 id="1-注解方式"><a href="#1-注解方式" class="headerlink" title="1. 注解方式"></a>1. 注解方式</h4><h4 id="dao-UserMapper-声明并定义方法"><a href="#dao-UserMapper-声明并定义方法" class="headerlink" title="dao.UserMapper 声明并定义方法"></a>dao.UserMapper 声明并定义方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Mapper文件中直接定义方法</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set user_name = #&#123;user_name&#125;, description = #&#123;description&#125;, icon = #&#123;icon&#125; where email = #&#123;email&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUserInfo</span><span class="params">(<span class="meta">@Param(&quot;user_name&quot;)</span> String userName,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@Param(&quot;description&quot;)</span> String description,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@Param(&quot;icon&quot;)</span> String icon,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@Param(&quot;email&quot;)</span> String email)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最后通过service-Impl-通过mapper调用"><a href="#最后通过service-Impl-通过mapper调用" class="headerlink" title="最后通过service.Impl 通过mapper调用"></a>最后通过service.Impl 通过mapper调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userMapper.updateUserInfo();</span><br></pre></td></tr></table></figure><h4 id="2-XML方式"><a href="#2-XML方式" class="headerlink" title="2. XML方式"></a>2. XML方式</h4><h4 id="application-yml-指定mapper-xml位置"><a href="#application-yml-指定mapper-xml位置" class="headerlink" title="application.yml 指定mapper.xml位置"></a>application.yml 指定mapper.xml位置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line"><span class="comment"># 如果是放在src/main/java目录下 classpath:/com/\*/*/mapper/\*Mapper.xml*</span></span><br><span class="line"><span class="comment"># 如果是放在resource目录 classpath:/mapper/**.xml*</span></span><br><span class="line"><span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/**.xml</span></span><br></pre></td></tr></table></figure><h4 id="dao-UserMapper-声明方法"><a href="#dao-UserMapper-声明方法" class="headerlink" title="dao.UserMapper 声明方法"></a>dao.UserMapper 声明方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Mapper文件中直接定义方法</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">selectByName</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UserMapper-xml-定义SQL"><a href="#UserMapper-xml-定义SQL" class="headerlink" title="UserMapper.xml 定义SQL"></a>UserMapper.xml 定义SQL</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zhouxug.hello.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.demo.model.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user where name = #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="最后通过service-Impl-通过mapper调用-1"><a href="#最后通过service-Impl-通过mapper调用-1" class="headerlink" title="最后通过service.Impl 通过mapper调用"></a>最后通过service.Impl 通过mapper调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userMapper.updateUserInfo();</span><br></pre></td></tr></table></figure><h1 id="5-时间查询"><a href="#5-时间查询" class="headerlink" title="5. 时间查询"></a>5. 时间查询</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply 拼接sql 语句</span></span><br><span class="line"><span class="comment">// 使用date_format(数据库字段名， &#x27;%Y&#x27;/&#x27;%m&#x27;/&#x27;%d&#x27;)</span></span><br><span class="line">wrapper.apply(<span class="string">&quot;date_format(post_time, &#x27;%Y&#x27;) = &#123;0&#125;&quot;</span>, <span class="string">&quot;2020&quot;</span>);</span><br><span class="line">List&lt;Blog&gt; blogList = blogMapper.selectList(wrapper);</span><br></pre></td></tr></table></figure><h1 id="6-遇到的一些坑"><a href="#6-遇到的一些坑" class="headerlink" title="6. 遇到的一些坑"></a>6. 遇到的一些坑</h1><h4 id="1-Update-User表中的userName时，sql拼接会缺失userName"><a href="#1-Update-User表中的userName时，sql拼接会缺失userName" class="headerlink" title="1. Update User表中的userName时，sql拼接会缺失userName"></a>1. Update User表中的userName时，sql拼接会缺失userName</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主要代码</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserName(<span class="string">&quot;new&quot;</span>);</span><br><span class="line">wrapper.eq(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;@example.com&quot;</span>);</span><br><span class="line">userMapper.update(user, wrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sql :  update user ser where email = &#123; &#125; </span></span><br><span class="line"><span class="comment">// 应当为 ： update user ser user_name = “new” where email = &#123; &#125;</span></span><br></pre></td></tr></table></figure><h5 id="解决方式：使用自定义sql-updateUserInfo"><a href="#解决方式：使用自定义sql-updateUserInfo" class="headerlink" title="解决方式：使用自定义sql : updateUserInfo"></a>解决方式：使用自定义sql : updateUserInfo</h5><h4 id="dao-UserMapper"><a href="#dao-UserMapper" class="headerlink" title="dao.UserMapper"></a>dao.UserMapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set user_name = #&#123;user_name&#125;, description = #&#123;description&#125;, icon = #&#123;icon&#125; where email = #&#123;email&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUserInfo</span><span class="params">(<span class="meta">@Param(&quot;user_name&quot;)</span> String userName,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@Param(&quot;description&quot;)</span> String description,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@Param(&quot;icon&quot;)</span> String icon,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@Param(&quot;email&quot;)</span> String email)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最后通过service-Impl-通过mapper调用-2"><a href="#最后通过service-Impl-通过mapper调用-2" class="headerlink" title="最后通过service.Impl 通过mapper调用"></a>最后通过service.Impl 通过mapper调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userMapper.updateUserInfo();</span><br></pre></td></tr></table></figure><h4 id="2-wrapper-select-获取部分字段时实体类与数据库映射失败"><a href="#2-wrapper-select-获取部分字段时实体类与数据库映射失败" class="headerlink" title="2. wrapper.select 获取部分字段时实体类与数据库映射失败"></a>2. wrapper.select 获取部分字段时实体类与数据库映射失败</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果实体类与数据库字段是驼峰式对应，则没有问题</span></span><br><span class="line"><span class="comment">// 但是如果是别名，哪怕设置了 @TableField(value = &quot;&quot;) 仍会无法映射</span></span><br><span class="line"> wrapper.select(<span class="string">&quot;post_time&quot;</span>);</span><br><span class="line"><span class="comment">// sql : SELECT post_time FROM blog</span></span><br><span class="line"><span class="comment">// 应当为 : SELECT post_time AS blogPostTime FROM blog</span></span><br><span class="line"><span class="comment">// 这里post_time别名为 blogPostTime 并且设置了@TableField(value = &quot;blogPostTime&quot;) 但是仍有问题</span></span><br></pre></td></tr></table></figure><h5 id="解决方法1：使用select-Class-entityClass-Predicate-predicate"><a href="#解决方法1：使用select-Class-entityClass-Predicate-predicate" class="headerlink" title="解决方法1：使用select(Class entityClass, Predicate predicate)"></a>解决方法1：使用select(Class<T> entityClass, Predicate<TableFieldInfo> predicate)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数为查询的实体类</span></span><br><span class="line"><span class="comment">// 第二个参数为lambda表达式 </span></span><br><span class="line"><span class="comment">// getColumn().equals() 是数据库中的字段名</span></span><br><span class="line"><span class="comment">// getProperty().equals() 是实体类中的字段名</span></span><br><span class="line"><span class="comment">// 连接多个字段使用 &amp;&amp; 连接</span></span><br><span class="line"><span class="comment">// !表示排除这个字段 反之为需要这个字段</span></span><br><span class="line">wrapper.select(Blog.class, i -&gt; !i.getColumn().equals(<span class="string">&quot;update_time&quot;</span>)</span><br><span class="line">        &amp;&amp; !i.getProperty().equals(<span class="string">&quot;blogContent&quot;</span>));</span><br><span class="line"></span><br><span class="line">wrapper.select(Blog.class, i -&gt; i.getColumn().equals(<span class="string">&quot;post_time&quot;</span>))；</span><br></pre></td></tr></table></figure><h5 id="解决方法2：使用select-String-column-手动拼接字段"><a href="#解决方法2：使用select-String-column-手动拼接字段" class="headerlink" title="解决方法2：使用select(String column)手动拼接字段"></a>解决方法2：使用select(String column)手动拼接字段</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wrapper.select(<span class="string">&quot;post_time AS blogPostTime&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sql : SELECT post_time AS blogPostTime FROM blog </span></span><br><span class="line"><span class="comment">// 感觉 select(column)是直接拼接进去的</span></span><br></pre></td></tr></table></figure><h5 id="题外话：distinct的使用"><a href="#题外话：distinct的使用" class="headerlink" title="题外话：distinct的使用"></a>题外话：distinct的使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接加在 数据库字段名前即可 </span></span><br><span class="line"><span class="comment">// 但是目前不知道 select(Class, Predicate) 如何使用</span></span><br><span class="line">select(<span class="string">&quot;distinct post_time AS blogPostTime&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="3-主键自增问题"><a href="#3-主键自增问题" class="headerlink" title="3. 主键自增问题"></a>3. 主键自增问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tag</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里的type = IdType.AUTO自增是指依靠数据库自增，而不是mp来填充</span></span><br><span class="line">    <span class="comment">// 所以数据库id一定要填自增</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer tagId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String tagName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hello </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五章 软件工程</title>
      <link href="2020/10/18/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
      <url>2020/10/18/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="5-1-软件工程概述"><a href="#5-1-软件工程概述" class="headerlink" title="5.1 软件工程概述"></a>5.1 软件工程概述</h1><h3 id="能力成熟度模型-CMM"><a href="#能力成熟度模型-CMM" class="headerlink" title="能力成熟度模型 CMM"></a>能力成熟度模型 CMM</h3><blockquote><p>对软件过后曾组织进化阶段的描述，随着软件组织定义、实施、测量、控制和改进，软件组织的能力经过这些阶段逐步提高。</p></blockquote><p>CMM将软件过程改进分为以下5个成熟度级别</p><ol><li><p>初始级</p></li><li><p>可重复级</p></li><li><p>已定义级</p></li><li><p>已管理级</p></li><li><p>优化级</p></li></ol><h1 id="5-2-软件过程模型"><a href="#5-2-软件过程模型" class="headerlink" title="5.2 软件过程模型"></a>5.2 软件过程模型</h1><h3 id="1-瀑布模型"><a href="#1-瀑布模型" class="headerlink" title="1. 瀑布模型"></a>1. 瀑布模型</h3><blockquote><p>​    将软件生存周期中的各个活动规定为依线性顺序连接的若干阶段的模型，它规定了由前至后、相互衔接的固定次序，如同瀑布流水逐级下落</p></blockquote><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ol><li>容易理解，管理成本低</li><li>强调开发的阶段性早期计划及需求调查和产品测试</li></ol><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ol><li>要求客户必须完整、正确和清晰的表达他们的需要</li><li>在开始的两三个阶段中很难评估真正的进度状态，在快结束时会有大量的集成测试工作，直到整个项目完成之前都不能演示系统的能力</li><li>需求或设计中的错误往往只有到了后期才能发现，<strong>对于项目风险的控制能力较弱</strong>。</li></ol><h3 id="2-增量模型​"><a href="#2-增量模型​" class="headerlink" title="2. 增量模型​"></a>2. 增量模型​</h3><blockquote><p>​    假设将需求分段为一系列增量产品，每一增量可以分别开发。该模型采用随着日程时间的进展而交错的线性序列，每一个线性序列产生软件的一个可发布的“增量”</p></blockquote><img src="http://cdn.zhouxug.cn/20201018104619.png" alt="增量模型" style="zoom:125%;" /><h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ol><li>瀑布模型所有优点</li><li>第一个可交付版本所需的成本和时间很少</li><li>开发由增量表示的小系统所承担的风险较小</li></ol><h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ol><li>若没有对用户的变更要求进行规划，那么产生的初始增量有可能导致之后的增量不稳定</li><li>若需求不像早期思考的那样稳定和完整，一些增量就可能要重新开发，重新发布</li><li>管理成本、进度和配置的复杂性较高</li></ol><h3 id="3-原型模型"><a href="#3-原型模型" class="headerlink" title="3. 原型模型"></a>3. 原型模型</h3><blockquote><p>​    原型是预期系统的一个可执行版本，反应了系统性质的一个子集。一个原型不必满足所有约束，其目的是快速、低成本的构建原型。然后交付给客户使用，并收集反馈意见，这些意见将在下一轮中对原型进行改进。</p></blockquote><h5 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h5><p>​    适合在开发初期用户需求不清晰或经常变化的情况。当系统不太复杂时，采用该方法比较好</p><h4 id="增量模型与原型模型的区别"><a href="#增量模型与原型模型的区别" class="headerlink" title="增量模型与原型模型的区别"></a>增量模型与原型模型的区别</h4><ol><li>增量的迭代可以并行，而原型不行</li><li>增量是一般具有底层框架和平台的项目，而原型则是开发需求不明确、架构风险打的项目。</li></ol><h3 id="4-螺旋模型"><a href="#4-螺旋模型" class="headerlink" title="4. 螺旋模型"></a>4. 螺旋模型</h3><blockquote><p>​    对于复杂的大型软件，开发一个原型通常达不到要求。螺旋模型将瀑布模型和演化结合起来，加入了风险分析。</p></blockquote><p>螺旋模型将开发过程分为几个螺旋周期，每个周期大致和瀑布模型相符。四步流程如下</p><ol><li>制定计划</li><li>风险分析</li><li>实施工程</li><li>用户评估</li></ol><p><img src="http://cdn.zhouxug.cn/20201018104623.png" alt="螺旋模型"></p><p>**螺旋模型强调风险分析，<u>因此特别适合庞大、复杂且具有高风险的系统</u> **  ctrl + u 下划线</p><h5 id="优点：-3"><a href="#优点：-3" class="headerlink" title="优点："></a>优点：</h5><ol><li>支持用户需求的动态变化，有助于提高软件的适应能力</li><li>为项目管理人员及时调整管理决策提供了便利，从而降低了风险</li></ol><h5 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h5><ol><li>要求开发人员有相当丰富的风险评估能力和专业知识</li><li>过多的迭代次数会增加开发成本，延迟提交时间</li></ol><h3 id="5-喷泉模型"><a href="#5-喷泉模型" class="headerlink" title="5. 喷泉模型"></a>5. 喷泉模型</h3><blockquote><p>以用户需求为动力，以对象作为驱动的模型，<strong>适合面向对象的开发</strong></p></blockquote><p><img src="http://cdn.zhouxug.cn/20201018104628.png" alt="image-20201014193317591"></p><h5 id="优点：-4"><a href="#优点：-4" class="headerlink" title="优点："></a>优点：</h5><ol><li>克服了瀑布模型和多项开发活动集成的局限性</li><li>允许各个开发活动交叉迭代进行，不必每次 需求分析 -&gt; 设计活动 -&gt; 编码，提高开发效率节省了大量开发时间</li></ol><h5 id="缺点：-3"><a href="#缺点：-3" class="headerlink" title="缺点："></a>缺点：</h5><ol><li>由于开发的各个阶段是重叠的，需要大量的开发人员，不利于项目管理</li><li>要求严格的文档管理，审核难度大</li></ol><h3 id="6-统一过程模型-UP"><a href="#6-统一过程模型-UP" class="headerlink" title="6. 统一过程模型 UP"></a>6. 统一过程模型 UP</h3><blockquote><p>“用例和风险驱动，以架构为中心，迭代并且增量”的开发模型</p></blockquote><p>统一过程定义了4个技术阶段及其制品</p><ol><li>起始阶段：生命周期目标</li><li>精化阶段：生命周期架构</li><li>构建阶段：初始运作功能</li><li>移交阶段：产品发布</li></ol><h3 id="7-敏捷方法"><a href="#7-敏捷方法" class="headerlink" title="7. 敏捷方法"></a>7. 敏捷方法</h3><blockquote><p>软件开发过程中加入灵活性，能在开发周期的后期增加或改变需求</p></blockquote><h4 id="1-极限编程-XP"><a href="#1-极限编程-XP" class="headerlink" title="1. 极限编程 XP"></a>1. 极限编程 XP</h4><blockquote><p>主要解决代码质量低的问题，无法提升代码速度</p></blockquote><p>四大价值观：</p><ol><li>沟通</li><li>简单性</li><li>反馈</li><li>勇气</li></ol><h4 id="2-水晶法-Crystal"><a href="#2-水晶法-Crystal" class="headerlink" title="2. 水晶法 Crystal"></a>2. 水晶法 Crystal</h4><blockquote><p>每一个不同的项目都需要一套不同的策略、约定和方法论，认为人对软件质量有重要的影响。通过更好地交流和经常性的交付，软件生产力得到提高</p></blockquote><h4 id="3-并列争求法-Scrum"><a href="#3-并列争求法-Scrum" class="headerlink" title="3. 并列争求法 Scrum"></a>3. 并列争求法 Scrum</h4><blockquote><p>使用迭代的方法，把每30天一次的迭代称为一个“冲刺”。多个自组织和自治的小组<strong>并行</strong>地递增实现产品。</p></blockquote><h4 id="4-自适应软件开发-ASD"><a href="#4-自适应软件开发-ASD" class="headerlink" title="4. 自适应软件开发 ASD"></a>4. 自适应软件开发 ASD</h4><h2 id="5-3-测试方法"><a href="#5-3-测试方法" class="headerlink" title="5.3 测试方法"></a>5.3 测试方法</h2><h3 id="1-黑盒测试"><a href="#1-黑盒测试" class="headerlink" title="1. 黑盒测试"></a>1. 黑盒测试</h3><blockquote><p>也称为功能测试，在完全不考虑软件内部结构和特性情况下，测试软件外部特性</p></blockquote><h3 id="2-白盒测试"><a href="#2-白盒测试" class="headerlink" title="2.白盒测试"></a>2.白盒测试</h3><blockquote><p>也成为结构测试，根据程序内部机构和逻辑来设计测试用例，对程序的路径和过程进行测试</p></blockquote><h5 id="1-语句覆盖"><a href="#1-语句覆盖" class="headerlink" title="1. 语句覆盖"></a>1. 语句覆盖</h5><p>只用满足一个案例，走过所有的语句即可</p><h5 id="2-判定-分支-覆盖"><a href="#2-判定-分支-覆盖" class="headerlink" title="2. 判定(分支)覆盖"></a>2. 判定(分支)覆盖</h5><p>对于判断语句，要设定T/F，相比语句覆盖，新增False</p><img src="http://cdn.zhouxug.cn/20201018104631.png" alt="image-20201017153157639" style="zoom:80%;" /><h5 id="3-条件覆盖"><a href="#3-条件覆盖" class="headerlink" title="3. 条件覆盖"></a>3. 条件覆盖</h5><p>判断语句中变量每个值都要考虑一遍</p><img src="http://cdn.zhouxug.cn/20201018104634.png" alt="image-20201017153212357" style="zoom:80%;" /><h5 id="4-判定-条件覆盖"><a href="#4-判定-条件覆盖" class="headerlink" title="4. 判定/条件覆盖"></a>4. 判定/条件覆盖</h5><p>判定覆盖各条件覆盖交叉，针对于判定中的条件取值 </p><img src="http://cdn.zhouxug.cn/20201018104636.png" alt="image-20201017153319004" style="zoom:80%;" /><h5 id="5-组合覆盖"><a href="#5-组合覆盖" class="headerlink" title="5. 组合覆盖"></a>5. 组合覆盖</h5><img src="http://cdn.zhouxug.cn/20201018104638.png" alt="image-20201017153349607" style="zoom:80%;" /><h5 id="6-路径覆盖"><a href="#6-路径覆盖" class="headerlink" title="6. 路径覆盖"></a>6. 路径覆盖</h5><img src="http://cdn.zhouxug.cn/20201018104642.png" alt="image-20201017153412730" style="zoom:80%;" /><h1 id="5-4-进度管理"><a href="#5-4-进度管理" class="headerlink" title="5.4 进度管理"></a>5.4 进度管理</h1><h3 id="1-Gantt图"><a href="#1-Gantt图" class="headerlink" title="1. Gantt图"></a>1. Gantt图</h3><blockquote><p>清晰地描述每个任务从何时开始，到何时结束，任务进度进展情况以及各个任务之间的并行性。但是不能反映各任务间的依赖关系，难以确定项目的关键</p></blockquote><p><img src="http://cdn.zhouxug.cn/20201018104644.png" alt="image-20201017153850807"></p><h3 id="2-PERT图-（类似AOE网）"><a href="#2-PERT图-（类似AOE网）" class="headerlink" title="2. PERT图 （类似AOE网）"></a>2. PERT图 （类似AOE网）</h3><blockquote><p>PERT图给出了每个任务的开始时间、结束时间该任务完成所需时间，还给出了任务间的关系，即哪些任务完成后才能开始另一项任务。<strong>松弛时间反映了完成某些任务时可以推迟其开始时间或延长完成时间</strong>，但是PERT图不能反映任务间的并行关系。</p></blockquote><h1 id="5-5-软件评审"><a href="#5-5-软件评审" class="headerlink" title="5.5 软件评审"></a>5.5 软件评审</h1><h3 id="1-软件质量的评审内容"><a href="#1-软件质量的评审内容" class="headerlink" title="1. 软件质量的评审内容"></a>1. 软件质量的评审内容</h3><ol><li>功能结构：在软件设计中占有极其重要的地位，软件评审时必须明确软件的数据结构，需检查的项目如下<ol><li>数据结构</li><li>功能结构</li><li>数据结构和功能结构之间的对应关系</li></ol></li><li>功能的通用性</li><li>模块的层次</li><li>模块结构</li></ol><h1 id="5-6-软件度量"><a href="#5-6-软件度量" class="headerlink" title="5.6 软件度量"></a>5.6 软件度量</h1><h3 id="1-McCabe-度量法"><a href="#1-McCabe-度量法" class="headerlink" title="1. McCabe 度量法"></a>1. McCabe 度量法</h3><blockquote><p>又称为环路度量，他认为循环和选择构成的环路越多，程序就越复杂。他把程序流程图中的每个处理符号都退化成为一个结点，原来连接不同处理符号的流线变成连接不同点的有向弧，这样得到的有向图称为<strong>程序图</strong>。</p></blockquote><p>*<em>McCabe环路复杂度: V(G) = m - n = 2 * p*</em></p><p><strong>m 是图G中弧的个数，n是图G的结点数，p是G中的强连通分量个数，通常取1</strong></p><p>ps: </p><ol><li>顶点强连通：有向图中u,v两点，u -&gt; v, v -&gt; u 都有一条有向的路径，则称这两点连通</li><li>强连通图：若所有节点都是强连通，则该图为强连通图</li><li>强连通分量：有向非连通图的极大强连通子图</li></ol><p>当环路复杂度超过10时，要充分测试这个模块就变得十分困难，</p>]]></content>
      
      
      <categories>
          
          <category> 软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/17/hello-world/"/>
      <url>2020/10/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
